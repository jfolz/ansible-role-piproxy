---

- name: Download binary
  ansible.builtin.unarchive:
    src: https://github.com/jfolz/piproxy/releases/download/{{ piproxy_version }}/piproxy-linux-x86_64-v{{ piproxy_version }}.tar.xz
    dest: /usr/local/bin
    remote_src: true
  become: true

- name: Create group
  ansible.builtin.group:
    name: "{{ piproxy_group }}"
    system: true
  become: true
  when: piproxy_user != "root"

- name: Create user
  ansible.builtin.user:
    name: "{{ piproxy_user }}"
    group: "{{ piproxy_group }}"
    system: true
    shell: /sbin/nologin
    create_home: false
    comment: "{{ piproxy_service_name }} service user"
  become: true
  when: piproxy_user != "root"

- name: Create config directory
  ansible.builtin.file:
    path: /etc/{{ piproxy_service_name }}
    owner: "{{ piproxy_user }}"
    group: "{{ piproxy_group }}"
    mode: "0700"
    state: directory
  become: true

- name: Install config file
  ansible.builtin.template:
    src: templates/config.yml.j2
    dest: /etc/{{ piproxy_service_name }}/config.yml
    owner: "{{ piproxy_user }}"
    group: "{{ piproxy_group }}"
    mode: "0400"
  become: true

- name: Create cache directory
  ansible.builtin.file:
    path: "{{ piproxy_cache_path }}"
    owner: "{{ piproxy_user }}"
    group: "{{ piproxy_group }}"
    mode: "0700"
    state: directory
  become: true

- name: Install service file
  ansible.builtin.template:
    src: templates/piproxy.service.j2
    dest: /etc/systemd/system/{{ piproxy_service_name }}.service
    mode: "0755"
  become: true

- name: Check Service Status
  ansible.builtin.systemd:
    name: "{{ piproxy_service_name }}"
  register: piproxy_service_status

- name: Start service if it is not running
  ansible.builtin.systemd:
    name: "{{ piproxy_service_name }}"
    daemon_reload: true
    state: started
    enabled: true
  when: piproxy_service_status.status.ActiveState != "active"
  become: true

- name: Reload service if it is running
  ansible.builtin.systemd:
    name: "{{ piproxy_service_name }}"
    daemon_reload: true
    state: reloaded
    enabled: true
  when: piproxy_service_status.status.ActiveState == "active"
  become: true
